{ parameter (list bytes) ;
  storage unit ;
  code { PUSH nat 3221225473 ;
         LAMBDA
           (pair bytes (list bytes))
           (pair bytes bytes (list bytes))
           { UNPAIR ;
             SWAP ;
             IF_CONS
               { DUP ;
                 SIZE ;
                 PUSH nat 32 ;
                 COMPARE ;
                 NEQ ;
                 IF { SWAP ;
                      DIG 2 ;
                      DROP 2 ;
                      PUSH string "CHANNEL_INVALID_HASH" ;
                      PAIR ;
                      FAILWITH }
                    { SWAP ; DUP 2 ; DIG 3 ; CONCAT ; SHA256 ; PAIR ; SWAP ; PAIR } }
               { DROP ; PUSH string "CHANNEL_QUEUE_EMPTY" ; FAILWITH } } ;
         LAMBDA
           (pair nat (list bytes))
           (pair nat (list bytes))
           { UNPAIR ;
             SWAP ;
             IF_CONS
               { DUP ;
                 NAT ;
                 DIG 3 ;
                 DUP 2 ;
                 COMPARE ;
                 GE ;
                 IF { DIG 2 ; DROP 2 ; PUSH string "CHANNEL_INVALID_FELT" ; PAIR ; FAILWITH }
                    { SWAP ; DROP ; PAIR } }
               { DROP ; PUSH string "CHANNEL_QUEUE_EMPTY" ; FAILWITH } } ;
         DUP 3 ;
         APPLY ;
         LAMBDA
           (pair bytes nat)
           (pair nat bytes)
           { UNPAIR ;
             DUP ;
             SHA256 ;
             PUSH nat 1 ;
             DIG 3 ;
             ADD ;
             DIG 2 ;
             NAT ;
             EDIV ;
             IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
             CDR ;
             PAIR } ;
         LAMBDA
           (pair (pair (lambda (pair bytes nat) (pair nat bytes)) nat) bytes)
           (pair nat bytes)
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             PUSH nat 1 ;
             DIG 3 ;
             SUB ;
             ABS ;
             SWAP ;
             PAIR ;
             EXEC } ;
         DUP 5 ;
         DUP 3 ;
         PAIR ;
         APPLY ;
         PUSH nat 3221225473 ;
         LAMBDA
           (pair nat (pair nat nat))
           nat
           { UNPAIR ;
             SWAP ;
             UNPAIR ;
             ADD ;
             EDIV ;
             IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
             CDR } ;
         DUP 2 ;
         APPLY ;
         LAMBDA
           (pair nat (pair nat nat))
           nat
           { UNPAIR ;
             SWAP ;
             UNPAIR ;
             DUP ;
             DUP 3 ;
             COMPARE ;
             GT ;
             IF { SWAP ; DUG 2 ; ADD ; SUB } { DIG 2 ; DROP ; SUB } ;
             ABS } ;
         DUP 3 ;
         APPLY ;
         LAMBDA
           (pair nat (pair nat nat))
           nat
           { UNPAIR ;
             SWAP ;
             UNPAIR ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
             CDR } ;
         DUP 4 ;
         APPLY ;
         LAMBDA
           (pair (pair (lambda (pair nat nat) nat) nat) (pair nat nat))
           nat
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             SWAP ;
             INT ;
             PUSH int 1 ;
             PAIR ;
             DUP 4 ;
             INT ;
             PUSH int 0 ;
             PAIR ;
             PAIR ;
             LEFT (pair (pair int int) int int) ;
             LOOP_LEFT
               { UNPAIR ;
                 UNPAIR ;
                 DIG 2 ;
                 UNPAIR ;
                 PUSH int 0 ;
                 DUP 3 ;
                 COMPARE ;
                 NEQ ;
                 IF { DUP 2 ;
                      DUP 5 ;
                      EDIV ;
                      IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                      CAR ;
                      DUP 2 ;
                      DUP 2 ;
                      MUL ;
                      DIG 4 ;
                      SUB ;
                      DIG 2 ;
                      DUP 4 ;
                      DIG 3 ;
                      MUL ;
                      DIG 4 ;
                      SUB ;
                      DIG 3 ;
                      SWAP ;
                      DIG 3 ;
                      PAIR ;
                      SWAP ;
                      DIG 2 ;
                      PAIR ;
                      PAIR ;
                      LEFT (pair (pair int int) int int) }
                    { PAIR ; DUG 2 ; PAIR ; PAIR ; RIGHT (pair (pair int int) int int) } } ;
             CAR ;
             UNPAIR ;
             PUSH int 1 ;
             DIG 2 ;
             COMPARE ;
             EQ ;
             IF {} { PUSH string "FELT_NOT_INVERTIBLE" ; FAILWITH } ;
             PUSH int 0 ;
             DUP 2 ;
             COMPARE ;
             LT ;
             IF { DIG 3 ; ADD } { DIG 3 ; DROP } ;
             ABS ;
             SWAP ;
             PAIR ;
             EXEC } ;
         DUP 5 ;
         DUP 3 ;
         PAIR ;
         APPLY ;
         DIG 4 ;
         DROP ;
         LAMBDA_REC
           (pair (lambda (pair nat nat) nat) (pair nat nat))
           nat
           { UNPAIR ;
             DUP ;
             DIG 3 ;
             DIG 2 ;
             APPLY ;
             DIG 2 ;
             UNPAIR ;
             PUSH nat 0 ;
             DUP 3 ;
             COMPARE ;
             EQ ;
             IF { DROP 4 ; PUSH nat 1 }
                { PUSH nat 1 ;
                  DUP 3 ;
                  LSR ;
                  DUP 2 ;
                  DUP 3 ;
                  PAIR ;
                  DUP 6 ;
                  SWAP ;
                  EXEC ;
                  PAIR ;
                  DIG 3 ;
                  SWAP ;
                  EXEC ;
                  PUSH nat 0 ;
                  PUSH nat 2 ;
                  DIG 4 ;
                  EDIV ;
                  IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
                  CDR ;
                  COMPARE ;
                  EQ ;
                  IF { SWAP ; DIG 2 ; DROP 2 } { SWAP ; PAIR ; EXEC } } } ;
         DUP 3 ;
         APPLY ;
         PUSH nat 8192 ;
         PUSH nat 2450347685 ;
         LAMBDA
           (pair (lambda (list bytes) (pair nat (list bytes))) (pair (pair (list bytes) nat) nat bytes))
           (pair nat (list bytes))
           { UNPAIR ;
             SWAP ;
             UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             DIG 2 ;
             DIG 4 ;
             SWAP ;
             EXEC ;
             UNPAIR ;
             DUP ;
             BYTES ;
             SHA256 ;
             DIG 5 ;
             DIG 4 ;
             ADD ;
             SWAP ;
             DIG 3 ;
             PAIR ;
             PAIR ;
             LEFT (pair bytes (list bytes)) ;
             LOOP_LEFT
               { UNPAIR ;
                 UNPAIR ;
                 IF_CONS
                   { DUP ;
                     SIZE ;
                     PUSH nat 32 ;
                     COMPARE ;
                     NEQ ;
                     IF { SWAP ; DROP ; PUSH string "CHANNEL_INVALID_HASH" ; PAIR ; FAILWITH }
                        { PAIR } }
                   { PUSH string "CHANNEL_QUEUE_EMPTY" ; FAILWITH } ;
                 UNPAIR ;
                 PUSH nat 1 ;
                 DUP 5 ;
                 AND ;
                 PUSH nat 0 ;
                 COMPARE ;
                 EQ ;
                 IF { DIG 2 ; CONCAT } { DIG 2 ; SWAP ; CONCAT } ;
                 SHA256 ;
                 PUSH nat 1 ;
                 DIG 3 ;
                 LSR ;
                 PUSH nat 1 ;
                 DUP 2 ;
                 COMPARE ;
                 EQ ;
                 IF { DROP ; PAIR ; RIGHT (pair (pair (list bytes) bytes) nat) }
                    { SWAP ; DIG 2 ; PAIR ; PAIR ; LEFT (pair bytes (list bytes)) } } ;
             UNPAIR ;
             DUP 4 ;
             DUP 2 ;
             COMPARE ;
             NEQ ;
             IF { SWAP ;
                  DIG 2 ;
                  DROP 2 ;
                  SWAP ;
                  PUSH string "MERKLE_ROOT_MISMATCH" ;
                  PAIR ;
                  PAIR ;
                  FAILWITH }
                { DIG 3 ; DROP 2 ; SWAP ; PAIR } } ;
         DUP 11 ;
         APPLY ;
         DIG 13 ;
         CAR ;
         PUSH bytes 0x ;
         PAIR ;
         DUP 13 ;
         SWAP ;
         EXEC ;
         UNPAIR ;
         SWAP ;
         UNPAIR ;
         DUP 12 ;
         SWAP ;
         EXEC ;
         UNPAIR ;
         SWAP ;
         DUP 13 ;
         SWAP ;
         EXEC ;
         UNPAIR ;
         SWAP ;
         DUP 14 ;
         SWAP ;
         EXEC ;
         UNPAIR ;
         DIG 2 ;
         DIG 3 ;
         PAIR ;
         PAIR ;
         NIL (pair bytes nat) ;
         PUSH int 11 ;
         DIG 4 ;
         DIG 4 ;
         PAIR ;
         PAIR ;
         PAIR ;
         LEFT (pair (list (pair bytes nat)) bytes (list bytes)) ;
         LOOP_LEFT
           { UNPAIR ;
             UNPAIR ;
             DUP 17 ;
             SWAP ;
             EXEC ;
             UNPAIR ;
             SWAP ;
             UNPAIR ;
             PUSH int 1 ;
             DUP 5 ;
             COMPARE ;
             GT ;
             IF { DUP 16 ; SWAP ; EXEC ; UNPAIR ; DUG 2 ; PAIR ; SWAP ; PAIR }
                { SWAP ;
                  IF_CONS
                    { DUP ;
                      NAT ;
                      DUP 22 ;
                      DUP 2 ;
                      COMPARE ;
                      GE ;
                      IF { DIG 2 ;
                           DIG 3 ;
                           DROP 3 ;
                           PUSH string "CHANNEL_INVALID_FELT" ;
                           PAIR ;
                           FAILWITH }
                         { DUG 2 ; DIG 3 ; CONCAT ; SHA256 ; PAIR ; SWAP ; PAIR } }
                    { DROP ; PUSH string "CHANNEL_QUEUE_EMPTY" ; FAILWITH } } ;
             UNPAIR ;
             SWAP ;
             UNPAIR ;
             DIG 5 ;
             DIG 3 ;
             DIG 4 ;
             PAIR ;
             CONS ;
             PUSH int 1 ;
             DUP 5 ;
             COMPARE ;
             EQ ;
             IF { DIG 3 ;
                  DROP ;
                  DUG 2 ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  RIGHT (pair (pair (pair bytes (list bytes)) int) (list (pair bytes nat))) }
                { PUSH int 1 ;
                  DIG 4 ;
                  SUB ;
                  DIG 3 ;
                  DIG 3 ;
                  PAIR ;
                  PAIR ;
                  PAIR ;
                  LEFT (pair (list (pair bytes nat)) bytes (list bytes)) } } ;
         DIG 11 ;
         DIG 14 ;
         DIG 15 ;
         DROP 3 ;
         UNPAIR ;
         SWAP ;
         UNPAIR ;
         DUP 8 ;
         SWAP ;
         PAIR ;
         DIG 13 ;
         SWAP ;
         EXEC ;
         CAR ;
         DUP 5 ;
         DUP 9 ;
         PAIR ;
         DUP 2 ;
         DIG 3 ;
         PAIR ;
         PAIR ;
         DUP 6 ;
         SWAP ;
         EXEC ;
         UNPAIR ;
         DUP 6 ;
         DUP 10 ;
         PAIR ;
         PUSH nat 8 ;
         DUP 5 ;
         ADD ;
         DIG 3 ;
         PAIR ;
         PAIR ;
         DUP 7 ;
         SWAP ;
         EXEC ;
         UNPAIR ;
         DIG 6 ;
         DUP 10 ;
         PAIR ;
         PUSH nat 16 ;
         DUP 6 ;
         ADD ;
         DIG 3 ;
         PAIR ;
         PAIR ;
         DUP 7 ;
         SWAP ;
         EXEC ;
         UNPAIR ;
         DIG 2 ;
         DIG 3 ;
         PAIR ;
         PAIR ;
         DIG 4 ;
         UNPAIR ;
         UNPAIR ;
         DIG 3 ;
         UNPAIR ;
         UNPAIR ;
         DUP 8 ;
         PUSH nat 1734477367 ;
         PAIR ;
         DUP 14 ;
         SWAP ;
         EXEC ;
         PUSH nat 5 ;
         PAIR ;
         DUP 16 ;
         SWAP ;
         EXEC ;
         PUSH nat 1 ;
         DUP 2 ;
         PAIR ;
         DUP 18 ;
         SWAP ;
         EXEC ;
         PUSH nat 1 ;
         DUP 4 ;
         PAIR ;
         DUP 19 ;
         SWAP ;
         EXEC ;
         PAIR ;
         DUP 16 ;
         SWAP ;
         EXEC ;
         DUP 13 ;
         DUP 3 ;
         PAIR ;
         DUP 19 ;
         SWAP ;
         EXEC ;
         PUSH nat 2338775057 ;
         DUP 5 ;
         PAIR ;
         DUP 20 ;
         SWAP ;
         EXEC ;
         PAIR ;
         DUP 17 ;
         SWAP ;
         EXEC ;
         DUP 4 ;
         DIG 4 ;
         PAIR ;
         DUP 18 ;
         SWAP ;
         EXEC ;
         DUP 5 ;
         DIG 5 ;
         PAIR ;
         DUP 18 ;
         SWAP ;
         EXEC ;
         DIG 5 ;
         PAIR ;
         DUP 18 ;
         SWAP ;
         EXEC ;
         PAIR ;
         DUP 17 ;
         SWAP ;
         EXEC ;
         DIG 11 ;
         DUP 5 ;
         PAIR ;
         DUP 17 ;
         SWAP ;
         EXEC ;
         PUSH nat 2342081930 ;
         DUP 6 ;
         PAIR ;
         DUP 18 ;
         SWAP ;
         EXEC ;
         PAIR ;
         DUP 16 ;
         SWAP ;
         EXEC ;
         PUSH nat 532203874 ;
         DUP 6 ;
         PAIR ;
         DUP 18 ;
         SWAP ;
         EXEC ;
         SWAP ;
         PAIR ;
         DUP 16 ;
         SWAP ;
         EXEC ;
         SWAP ;
         PAIR ;
         DUP 15 ;
         SWAP ;
         EXEC ;
         PUSH nat 1 ;
         PUSH nat 1024 ;
         DUP 6 ;
         PAIR ;
         DIG 14 ;
         SWAP ;
         EXEC ;
         PAIR ;
         DUP 16 ;
         SWAP ;
         EXEC ;
         SWAP ;
         PAIR ;
         DUP 13 ;
         SWAP ;
         EXEC ;
         DIG 6 ;
         PAIR ;
         DUP 13 ;
         SWAP ;
         EXEC ;
         SWAP ;
         DIG 5 ;
         PAIR ;
         DUP 12 ;
         SWAP ;
         EXEC ;
         PAIR ;
         DUP 13 ;
         SWAP ;
         EXEC ;
         SWAP ;
         DIG 3 ;
         PAIR ;
         DUP 10 ;
         SWAP ;
         EXEC ;
         PAIR ;
         DUP 11 ;
         SWAP ;
         EXEC ;
         SWAP ;
         DIG 6 ;
         DUG 2 ;
         PAIR ;
         DIG 3 ;
         DIG 3 ;
         PAIR ;
         PAIR ;
         PAIR ;
         SWAP ;
         NIL (pair bytes nat) ;
         SWAP ;
         ITER { CONS } ;
         ITER { UNPAIR ;
                DIG 2 ;
                UNPAIR ;
                UNPAIR ;
                UNPAIR ;
                DIG 2 ;
                UNPAIR ;
                PUSH nat 8 ;
                DUP 6 ;
                COMPARE ;
                EQ ;
                IF { DIG 3 ;
                     DIG 4 ;
                     DIG 5 ;
                     DIG 6 ;
                     DROP 5 ;
                     SWAP ;
                     DUP 8 ;
                     SWAP ;
                     EXEC ;
                     UNPAIR ;
                     DIG 2 ;
                     COMPARE ;
                     EQ ;
                     IF {} { PUSH string "FRI_INVALID_CP_EVAL_LAST" ; FAILWITH } ;
                     PUSH nat 0 ;
                     PUSH nat 0 ;
                     PUSH nat 0 ;
                     PAIR ;
                     PUSH nat 0 }
                   { DUP 5 ;
                     DUP 5 ;
                     EDIV ;
                     IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
                     CDR ;
                     DUP 7 ;
                     DUP 7 ;
                     PAIR ;
                     SWAP ;
                     DIG 4 ;
                     PAIR ;
                     PAIR ;
                     DUP 8 ;
                     SWAP ;
                     EXEC ;
                     UNPAIR ;
                     DUP 6 ;
                     PUSH nat 2 ;
                     DUP 8 ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     DUP 7 ;
                     ADD ;
                     EDIV ;
                     IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
                     CDR ;
                     DIG 7 ;
                     DUP 8 ;
                     PAIR ;
                     SWAP ;
                     DIG 3 ;
                     PAIR ;
                     PAIR ;
                     DUP 8 ;
                     SWAP ;
                     EXEC ;
                     UNPAIR ;
                     DIG 2 ;
                     DUP ;
                     DIG 5 ;
                     COMPARE ;
                     EQ ;
                     IF {} { PUSH string "FRI_INVALID_CP_EVAL" ; FAILWITH } ;
                     PUSH nat 2 ;
                     DUP 3 ;
                     DUP 3 ;
                     PAIR ;
                     DUP 14 ;
                     SWAP ;
                     EXEC ;
                     PAIR ;
                     DUP 10 ;
                     SWAP ;
                     EXEC ;
                     DUP 5 ;
                     PUSH nat 2 ;
                     PAIR ;
                     DUP 12 ;
                     SWAP ;
                     EXEC ;
                     DIG 3 ;
                     DIG 3 ;
                     PAIR ;
                     DUP 12 ;
                     SWAP ;
                     EXEC ;
                     PAIR ;
                     DUP 9 ;
                     SWAP ;
                     EXEC ;
                     DIG 6 ;
                     PAIR ;
                     DUP 9 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     PAIR ;
                     DUP 10 ;
                     SWAP ;
                     EXEC ;
                     PUSH nat 1 ;
                     DIG 5 ;
                     LSR ;
                     SWAP ;
                     DUP 4 ;
                     DIG 4 ;
                     PAIR ;
                     DUP 8 ;
                     SWAP ;
                     EXEC ;
                     PAIR ;
                     DIG 3 } ;
                DIG 3 ;
                PAIR ;
                PAIR ;
                PAIR } ;
         SWAP ;
         DIG 2 ;
         DIG 3 ;
         DIG 4 ;
         DIG 5 ;
         DIG 6 ;
         DROP 6 ;
         CAR ;
         CAR ;
         CAR ;
         SIZE ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF {} { PUSH string "CHANNEL_QUEUE_NOT_EMPTY" ; FAILWITH } ;
         UNIT ;
         NIL operation ;
         PAIR } }

